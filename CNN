#CNN

import tensorflow as tf

import tensorflow

from tensorflow import keras

from keras import datasets, layers, models

import matplotlib.pyplot as plt

(

train_images, train labels), (test_images, test_labels) datasets.cifar10.load_data()

#Normalize pixel values to be between 0 and 1

train_images, test_images train_images/ 255.0, test_images/255.8

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',

' dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10)) in range(25):

for i plt.subplot(5,5,1+1)

plt.xticks([])

plt.yticks([]) plt.grid(False)

plt.imshow(train_images[i])

plt.xlabel(class_names[train_labels [1][0]])

print("Given dataset: ")

plt.show()









CNN 2


model models. Sequential()

model.add(layers. Conv2D(32, (3, 3), activation 'relu, input_shape=(32, 32, 3))) model.add(layers. MaxPooling2D((2, 2)))

model.add(layers.Conv2D(64, (3, 3), activation-'relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) print("Architecture of the model: ")

model.summary()



CNN3


#Adding dense layer model.add(layers. Flatten())

model.add(layers.Dense(64, activation 'relu')) model.add(layers.Dense(10)) print("Architecture of the modal: ")

model.summary()


CNN4


model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy( from_logits=True), metrics=['accuracy'])

history model.fit (train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))



CNN5
test_loss, test_acc model.evaluate(test_images, test_labels, verbose=2) print("Test accuracy: "test_acc)
